import { ManaColor, Tile } from "./Tile"

export class Card {
  readonly name: string
  readonly mana: Array<ManaColor>
  readonly hasAdvantage: boolean
  transformations: Array<[Array<Tile>, Tile]>
  isFrosen: boolean = false
  hasFullMana: boolean = false

  constructor(name: string, mana: Array<ManaColor>, transformations: Array<[Array<Tile>, Tile]>, hasAdvantage: boolean = false) {
    this.name = name
    this.mana = mana
    this.transformations = transformations
    this.hasAdvantage = hasAdvantage
    if (hasAdvantage) this.hasFullMana = true
  }

  copy(): Card {
    return new Card(this.name, [...this.mana], this.transformations.map(([from, to]) => [[...from], to]), this.hasAdvantage);
  }
}

export const preDefinedCards: Array<Card> = [
  new Card('_–ü—É—Å—Ç–æ', [], []),
  new Card('_–¢–µ—Å—Ç 1', [], [[[Tile.yellow], Tile.green]], true),
  new Card('_–¢–µ—Å—Ç 2', [], [[[Tile.yellow], Tile.green], [[Tile.yellow], Tile.skull]], false),
  new Card('–î—Ä–æ—Ç–∏–∫', [ManaColor.Yellow, ManaColor.Blue], [], false),
  new Card('–ü–µ–≤–µ—Ü –õ—É–Ω—ã', [ManaColor.Yellow, ManaColor.Blue], [[[Tile.violet], Tile.green]], true),
  new Card('–ü—á–µ–ª–∞', [ManaColor.Green, ManaColor.Blue], [], false),
  new Card('–ú–∞–ª—å–∫–∞–Ω–¥–µ—Å—Å–∞', [ManaColor.Blue, ManaColor.Violet], [[[Tile.yellow], Tile.green]], true),
  new Card('–ò—à–±–∞–ª–∞', [ManaColor.Violet, ManaColor.Yellow], [[[Tile.red], Tile.skull], [[Tile.green], Tile.yellow]], false),
  new Card('–ú–æ–≥–∏–ª—å–Ω—ã–π –º—É–¥—Ä–µ—Ü', [ManaColor.Red, ManaColor.Yellow], [[[Tile.green], Tile.violet]], true),
  new Card('–õ–∞–º–∞—à—Ç—É', [ManaColor.Red, ManaColor.Yellow], [[[Tile.yellow], Tile.violet]], true),
  new Card('–ö—Ä—É—à–∏—Ç–µ–ª—å', [ManaColor.Brown], [], false),
  new Card('–ê–ª—Ö–∏–º–∏–∫', [ManaColor.Red, ManaColor.Brown], [[Tile.allColors, Tile.yellow]], false),
  new Card('–ì–Ω–µ–≤', [ManaColor.Brown, ManaColor.Yellow], [[[Tile.blue], Tile.brown], [[Tile.yellow], Tile.skull]], false),
  new Card('–•–µ–¥–ª–∏', [ManaColor.Brown, ManaColor.Yellow], [[[Tile.violet], Tile.yellow], [[Tile.green], Tile.skull]], false),
  new Card('–ê—Ä–±–∞–ª–µ—Ç –ë–µ–¥—ã', [ManaColor.Red], [[[Tile.blue], Tile.rockSkull]], false),
  new Card('–ú–æ—Ä—Å–∫–æ–π –≤–æ–ª–∫', [ManaColor.Red, ManaColor.Yellow], [[[Tile.green], Tile.blue]], true),
  new Card('–ó—É—É–ª', [ManaColor.Red, ManaColor.Blue, ManaColor.Violet], [], false),
  new Card('–£—Ç–æ–Ω—É–≤—à–∏–π –º–∞—Ç—Ä–æ—Å', [ManaColor.Red, ManaColor.Violet], [[[Tile.yellow], Tile.blue]], true),
  new Card('–û—Ç—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±—Ä–∞', [ManaColor.Violet], [], false),
  new Card('–î–æ—á—å –ª—å–¥–∞', [ManaColor.Brown, ManaColor.Violet], [[[Tile.red], Tile.blue]], true),
  new Card('–û–±—Ä–µ—á–µ–Ω–Ω–∞—è –ö–æ—Å–∞', [ManaColor.Violet], [[[Tile.yellow], Tile.rockSkull]], false),
  new Card('–•—Ä–∞–Ω–∏—Ç–µ–ª—å –¥—É—à', [ManaColor.Brown, ManaColor.Violet], [[Tile.allColors, Tile.skull]], false),
  new Card('–õ—É–Ω–Ω—ã–π –∫—Ä–æ–ª–∏–∫', [ManaColor.Violet, ManaColor.Green], [[[Tile.blue], Tile.yellow]], true),
  new Card('–≠—Å—Å–µ–Ω—Ü–∏—è –∑–ª–∞', [ManaColor.Green], [], false),
  new Card('–î–∏—Ç—è –ª–µ—Ç–∞', [ManaColor.Yellow, ManaColor.Green], [[[Tile.brown], Tile.red]], true),
  new Card('–Ø–æ –ì—É–∞–π', [ManaColor.Red, ManaColor.Green], [[[Tile.violet], Tile.red]], false),
  new Card('–°—Ç–∞—Ä–ø–æ–º –¢–æ–ø–æ—Ä–∏—â–Ω–∏–∫–æ–≤', [ManaColor.Violet, ManaColor.Green], [[[Tile.blue], Tile.red]], true),
  new Card('–ì–∏–º–ª–µ—Ç', [ManaColor.Red, ManaColor.Yellow], [[[Tile.green], Tile.brown]], true),
  new Card('–ú–∏–ª–æ—Å–µ—Ä–¥–∏–µ', [ManaColor.Green, ManaColor.Blue], [[[Tile.violet], Tile.yellow]], true),
  new Card('–î—Ä–µ–≤–Ω–∏–π –ü—Ä–∏—Å–ª—É–∂–Ω–∏–∫', [ManaColor.Red, ManaColor.Blue], [[[Tile.brown], Tile.violet]], true),
  new Card('–¢–∞–π-–ü–∞–Ω', [ManaColor.Green, ManaColor.Blue], [[[Tile.brown], Tile.red]], true),
  new Card('–ö—É—Ä–∞–Ω–¥–∞—Ä–∞', [ManaColor.Red, ManaColor.Green, ManaColor.Violet], [[[Tile.yellow], Tile.rockSkull]], false),
  new Card('–ö—É–ª–∞–∫ –ó–æ—Ä–Ω–∞', [ManaColor.Red, ManaColor.Violet], [[[Tile.yellow], Tile.skull]], true),
  new Card('–ê–ø–æ—Ñ–∏—Å', [ManaColor.Red, ManaColor.Yellow], [[[Tile.green], Tile.skull]], true),
  new Card('–û–±—Ä–µ—á–µ–Ω–Ω–∞—è –ì–ª–µ—Ñ–∞', [ManaColor.Green], [[[Tile.brown], Tile.rockSkull]], false),
  new Card('–ê–¥—Å–∫–∏–π –∫–æ—Ä–æ–ª—å', [ManaColor.Violet, ManaColor.Yellow], [[[Tile.green], Tile.skull], [[Tile.brown], Tile.red]], false),
  new Card('–ê–ø—Ç–µ–∫–∞—Ä—å', [ManaColor.Green, ManaColor.Blue], [[Tile.allColors, Tile.brown]], false),
  new Card('–ì–µ—Ä–æ–ª—å–¥ –ü–æ–≥–∏–±–µ–ª–∏', [ManaColor.Red, ManaColor.Brown], [[[Tile.blue], Tile.violet]], true),
  new Card('–ö–æ—Ä–æ–ª–µ–≤–∞ –ú–∞—Ä–∞–¥–∂–µ–π', [ManaColor.Red, ManaColor.Blue], [[[Tile.green], Tile.rockSkull]], false),
  new Card('–ö–æ—Ä–æ–ª—å –ö—Ä–æ–≤–∞–≤—ã–π –ú–æ–ª–æ—Ç', [ManaColor.Red, ManaColor.Brown], [[[Tile.blue], Tile.rockSkull]], false),
  new Card('–õ–µ–¥–Ω–∏–∫–æ–Ω', [ManaColor.Brown, ManaColor.Violet], [[[Tile.yellow], Tile.blue], [[Tile.red], Tile.rockSkull]], false),
  new Card('–ú–æ–π—Ä–∞', [ManaColor.Blue, ManaColor.Brown], [[[Tile.green], Tile.rockSkull]], false),
  new Card('–ù–∏–º—É—ç', [ManaColor.Violet, ManaColor.Green], [[[Tile.red], Tile.violet], [[Tile.yellow], Tile.skull]], false),
  new Card('–û—Ç–µ—Ü –û–ª—å—Ö–∞', [ManaColor.Violet, ManaColor.Green], [[[Tile.red], Tile.violet], [[Tile.yellow], Tile.skull]], false),
  new Card('–°–µ—Ö–º–∞', [ManaColor.Red, ManaColor.Violet], [[[Tile.blue], Tile.skull], [[Tile.brown], Tile.yellow]], false),
  new Card('–¢–∞–Ω—Ü—É—é—â–∞—è —Å –¥—É—Ö–∞–º–∏', [ManaColor.Blue, ManaColor.Violet], [[Tile.allColors, Tile.green]], false),
  new Card('–¢—Ä–∫"–ù–∞–ª–∞', [ManaColor.Red, ManaColor.Yellow], [[[Tile.green], Tile.skull]], true),
  new Card('–£–≤–∞—à-–ö–∞', [ManaColor.Green, ManaColor.Blue], [[[Tile.violet], Tile.rockSkull]], false),
  new Card('–§–æ–Ω—Ç–∞–Ω –ó–≤–µ–∑–¥', [ManaColor.Red, ManaColor.Yellow, ManaColor.Blue], [[[Tile.brown], Tile.skull]], false),
  new Card('–¶–∏–ª–∏–Ω—å', [ManaColor.Red, ManaColor.Yellow], [[[Tile.violet], Tile.red], [[Tile.brown], Tile.skull]], false),
]

export function getCardByName(name: string): Card {
  for (let c of preDefinedCards) {
    if (c.name == name) return c
  }
  return preDefinedCards[0]
}

export function getFrozenColors(cards: Array<Card>): Set<ManaColor> {
  let frozenColors: Array<ManaColor> = cards.filter(c => c.isFrosen).map(c => c.mana).flat()
  return new Set(frozenColors)
}

export const teams: Map<string, Array<string>> = new Map([
  ['-', []],
  ['üü¶ –°–∏–Ω–∏–π –ü—á–µ–ª–∞', ['–î—Ä–æ—Ç–∏–∫', '–ü–µ–≤–µ—Ü –õ—É–Ω—ã', '–ü—á–µ–ª–∞', '–ú–∞–ª—å–∫–∞–Ω–¥–µ—Å—Å–∞']],
  ['üü® –ñ–µ–ª—Ç—ã–π –ò—à–±–∞', ['–î—Ä–æ—Ç–∏–∫', '–ò—à–±–∞–ª–∞', '–ú–æ–≥–∏–ª—å–Ω—ã–π –º—É–¥—Ä–µ—Ü', '–õ–∞–º–∞—à—Ç—É']],
  ['üü´ –ö–æ—Ä–∏—á–Ω–µ–≤—ã–π –ê–ª—Ö–∏–º–∏–∫', ['–ö—Ä—É—à–∏—Ç–µ–ª—å', '–ê–ª—Ö–∏–º–∏–∫', '–ì–Ω–µ–≤', '–•–µ–¥–ª–∏']],
  ['üü• –ö—Ä–∞—Å–Ω—ã–π –ó—É—É–ª', ['–ê—Ä–±–∞–ª–µ—Ç –ë–µ–¥—ã', '–ú–æ—Ä—Å–∫–æ–π –≤–æ–ª–∫', '–ó—É—É–ª', '–£—Ç–æ–Ω—É–≤—à–∏–π –º–∞—Ç—Ä–æ—Å']],
  ['üü™ –§–∏–æ–ª–µ—Ç–æ–≤—ã–π –ó—É—É–ª', ['–û—Ç—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±—Ä–∞', '–î–æ—á—å –ª—å–¥–∞', '–ó—É—É–ª', '–£—Ç–æ–Ω—É–≤—à–∏–π –º–∞—Ç—Ä–æ—Å']],
  ['üü™ –§–∏–æ–ª–µ—Ç–æ–≤—ã–π –ò—à–±–∞', ['–û–±—Ä–µ—á–µ–Ω–Ω–∞—è –ö–æ—Å–∞', '–ò—à–±–∞–ª–∞', '–•—Ä–∞–Ω–∏—Ç–µ–ª—å –¥—É—à', '–õ—É–Ω–Ω—ã–π –∫—Ä–æ–ª–∏–∫']],
  ['üü© –ó–µ–ª–µ–Ω—ã–π –Ø–æ –ì—É–∞–π', ['–≠—Å—Å–µ–Ω—Ü–∏—è –∑–ª–∞', '–î–∏—Ç—è –ª–µ—Ç–∞', '–Ø–æ –ì—É–∞–π', '–°—Ç–∞—Ä–ø–æ–º –¢–æ–ø–æ—Ä–∏—â–Ω–∏–∫–æ–≤']],
])
